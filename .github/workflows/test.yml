name: TestBuild Debian Package For Docker Used In Termux

on:
  workflow_dispatch:
  
concurrency:
  group: build-termux-docker

jobs: 
  build-termux-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        platform: [x86_64]

    steps:
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Set Build Architecture
        run: |
          if [ "${{ matrix.platform }}" = "aarch64" ]; then
            echo "arch_name=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" = "i686" ]; then
            echo "arch_name=x86" >> $GITHUB_ENV
          else
            echo "arch_name=${{ matrix.platform }}" >> $GITHUB_ENV
          fi

      - name: Build Debian Package For Docker
        run: |
          mkdir -p build
          
          # Support for ARM and AARCH64
          if [[ "${{ matrix.platform }}" == "arm" || "${{ matrix.platform }}" == "aarch64" ]]; then
            docker pull aptman/qus
            # docker run --rm --privileged aptman/qus -s -- -p arm aarch64
          fi

          git clone https://github.com/termux/termux-packages build-golang
          cd build-golang
          mkdir out
          TERMUX_ARCH=x86_64 TERMUX_INSTALL_DEPS=true TERMUX_DEBDIR=./out CONTAINER_NAME="golang-${{ matrix.platform }}" ./scripts/run-docker.sh ./build-package.sh golang
          ls out
