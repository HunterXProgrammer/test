name: Build Debian Package For Docker Used In Termux

on:
  workflow_dispatch:
  
concurrency:
  group: build-termux-docker

jobs: 
  build-termux-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        platform: [x86_64]

    steps:
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          echo "deb [arch=\"$(dpkg --print-architecture)\" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

      - name: Set Build Architecture
        run: |
          if [ "${{ matrix.platform }}" = "aarch64" ]; then
            echo "arch_name=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.platform }}" = "i686" ]; then
            echo "arch_name=x86" >> $GITHUB_ENV
          else
            echo "arch_name=${{ matrix.platform }}" >> $GITHUB_ENV
          fi

      - name: Build Debian Package For Docker
        run: |
          mkdir -p build
          
          # Support for ARM and AARCH64
          if [[ "${{ matrix.platform }}" == "arm" || "${{ matrix.platform }}" == "aarch64" ]]; then
            docker pull aptman/qus
            docker run --rm --privileged aptman/qus -s -- -p arm aarch64
          fi

          docker pull termux/termux-docker:${{ matrix.platform }}
          docker run --privileged --name mdtest-${{ matrix.platform }} termux/termux-docker:${{ matrix.platform }} bash -c " \
              yes | pkg upgrade -y && \
              pkg install -y git && \
              cd && \
              git clone https://github.com/termux/termux-packages build-golang && \
              cd build-golang && \
              ./scripts/setup-termux.sh && \
              git reset --hard 21694ae13fc47b021262e1693ff76a559afd3930 && \
              sed -i '/On-device builds without termux-exec are not supported/d' scripts/build/termux_step_setup_variables.sh
              sed -i 's#bin/\$TERMUX_GOLANG_DIRNAME#bin#' packages/golang/build.sh && \
              ./build-package.sh -I golang && \
              cd && \
              git clone --depth=1 https://github.com/termux/termux-packages build-docker && \
              cd build-docker && \
              ./scripts/setup-termux.sh && \
              mkdir build && \
              sed -i 's/.*On-device builds without termux-exec are not supported.*/true/g' scripts/build/termux_step_setup_variables.sh
              cat scripts/build/termux_step_setup_variables.sh
              ./build-package.sh -I -o build --format debian docker \
              "
          docker exec mdtest-${{ matrix.platform }} bash -c 'ls $HOME/build-docker/build'
          docker exec mdtest-${{ matrix.platform }} bash -c 'basename "$(ls $HOME/build-docker/build | head -n 1)"'
          
 
