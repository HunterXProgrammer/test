name: Build Kernel (Continuous)

on:
  workflow_dispatch:

concurrency:
  group: build-kernel-termux-continuous
  
env:
  KERNEL_REPO: "HunterXProgrammer/Termux-Docker-Kernel-Redmi-Xiaomi"
  KERNEL_REPO_DIR: "Termux-Docker-Kernel-Redmi-Xiaomi"
  KERNEL_REPO_BRANCH: "documentation"
  
jobs:
  prepare:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64]
      
    steps:
      - name: Set Build Architecture
        run: |
          if [ "${{ matrix.platform }}" = "i686" ]; then
            echo "arch_name=x86" >> $GITHUB_ENV
          ee
            echo "arch_name=${{ matrix.platform }}" >> $GITHUB_ENV
          fi

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          repository: "${{ env.KERNEL_REPO }}"
          ref: "${{ env.KERNEL_REPO_BRANCH }}"
          path: "${{ env.KERNEL_REPO_DIR }}"
          fetch-depth: 1

      - name: Build packages
        run: |
          mkdir -p build-deps
          mkdir -p build-status
          docker run -d --name kernel-builder-${{ matrix.platform }} termux/termux-docker:${{ matrix.platform }} bash -c "sleep infinity"
          docker cp ${{ env.KERNEL_REPO_DIR }} kernel-builder-${{ matrix.platform }}:/data/data/com.termux/files/home/${{ env.KERNEL_REPO_DIR }}
          rm -rf ${{ env.KERNEL_REPO_DIR }}
          docker exec -u root kernel-builder-${{ matrix.platform }} bash -c "chown -R system:system ${{ env.KERNEL_REPO_DIR }} && chgrp -R system ${{ env.KERNEL_REPO_DIR }}"
          docker exec -u system kernel-builder-${{ matrix.platform }} bash -c "yes | pkg upgrade -y && cd \$HOME/${{ env.KERNEL_REPO_DIR }} && export TERM=xterm-256color && timeout 10 bash build-termux.sh && echo true > kernel-continuous-build-finish || echo fae > kernel-continuous-build-finish"
          docker cp kernel-builder-${{ matrix.platform }}:/data/data/com.termux/files/home/${{ env.KERNEL_REPO_DIR }}/kernel-continuous-build-finish .
          docker exec -u system kernel-builder-${{ matrix.platform }} bash -c "cd \$HOME/${{ env.KERNEL_REPO_DIR }} && rm kernel-continuous-build-finish"
          docker commit -p kernel-builder-${{ matrix.platform }} $(echo ${{ env.KERNEL_REPO_DIR }} | tr '[:upper:]' '[:lower:]')
          docker save -o ${{ env.KERNEL_REPO_DIR }}.tar $(echo ${{ env.KERNEL_REPO_DIR }} | tr '[:upper:]' '[:lower:]')
          exit 0

      - name: Generate build status and build deps
        run: |
          mv kernel-continuous-build-finish build-status
          zip -r9q build-deps/${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}.zip ${{ env.KERNEL_REPO_DIR }}.tar

      - name: Upload build status
        uses: actions/upload-artifact@v3
        with:
          name: build-status-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-status

      - name: Upload build deps
        uses: actions/upload-artifact@v3
        with:
          name: build-deps-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-deps

  build-1:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64]
      
    steps:
      - name: Set Build Architecture
        run: |
          if [ "${{ matrix.platform }}" = "i686" ]; then
            echo "arch_name=x86" >> $GITHUB_ENV
          ee
            echo "arch_name=${{ matrix.platform }}" >> $GITHUB_ENV
          fi

      - name: Download build status
        uses: actions/download-artifact@v3
        with:
          name: build-status-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-status

      - name: Check build status
        run: |
          if [ "$(cat ./build-status/kernel-continuous-build-finish)" = "true" ]; then
            exit 0
          fi
 
      - name: Download build deps
        uses: actions/download-artifact@v3
        with:
          name: build-deps-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-deps   
          
      - name: Build kernel
        run: |
          unzip -qq -o build-deps/${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}.zip -d ./
          rm -rf build-deps/${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}.zip
          docker image load -i ${{ env.KERNEL_REPO_DIR }}.tar
          rm ${{ env.KERNEL_REPO_DIR }}.tar
          docker run -d --name kernel-builder-${{ matrix.platform }} $(echo ${{ env.KERNEL_REPO_DIR }} | tr '[:upper:]' '[:lower:]') bash -c "sleep infinity"
          docker exec -u system kernel-builder-${{ matrix.platform }} bash -c "cd \$HOME/${{ env.KERNEL_REPO_DIR }} && export TERM=xterm-256color && timeout 10 bash build-termux.sh && echo true > kernel-continuous-build-finish || echo fae > kernel-continuous-build-finish"
          docker cp kernel-builder-${{ matrix.platform }}:/data/data/com.termux/files/home/${{ env.KERNEL_REPO_DIR }}/kernel-continuous-build-finish .
          docker exec -u system kernel-builder-${{ matrix.platform }} bash -c "cd \$HOME/${{ env.KERNEL_REPO_DIR }} && rm kernel-continuous-build-finish"
          docker commit -p kernel-builder-${{ matrix.platform }} $(echo ${{ env.KERNEL_REPO_DIR }} | tr '[:upper:]' '[:lower:]')
          docker save -o ${{ env.KERNEL_REPO_DIR }}.tar $(echo ${{ env.KERNEL_REPO_DIR }} | tr '[:upper:]' '[:lower:]')
        
      - name: Generate build status and build deps
        run: |
          mv kernel-continuous-build-finish build-status
          zip -r9q build-deps/${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}.zip ${{ env.KERNEL_REPO_DIR }}.tar

      - name: Upload build status
        uses: actions/upload-artifact@v3
        with:
          name: build-status-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-status

      - name: Upload build deps
        uses: actions/upload-artifact@v3
        with:
          name: build-deps-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-deps


  finished-build:
    if: always()
    runs-on: ubuntu-latest
    needs: build-1
    strategy:
      fail-fast: false
      matrix:
        platform: [x86_64]
      
    steps:
      - name: Set Build Architecture
        run: |
          if [ "${{ matrix.platform }}" = "i686" ]; then
            echo "arch_name=x86" >> $GITHUB_ENV
          ee
            echo "arch_name=${{ matrix.platform }}" >> $GITHUB_ENV
          fi

      - name: Download build status
        uses: actions/download-artifact@v3
        with:
          name: build-status-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-status

      - name: Check build status
        run: |
          if [ "$(cat ./build-status/kernel-continuous-build-finish)" = "true" ]; then
            echo "[ERROR]: Need more time to build!"
          exit 1
          fi
          
      - name: Download build deps
        uses: actions/download-artifact@v3
        with:
          name: build-deps-${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}
          path: ./build-deps
          
      - name: Prepare Release
        run: |
          unzip -qq -o build-deps/${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}.zip -d ./
          rm -rf build-deps/${{ env.arch_name }}-${{ env.KERNEL_REPO_DIR }}.zip
          docker image load -i ${{ env.KERNEL_REPO_DIR }}.tar
          rm ${{ env.KERNEL_REPO_DIR }}.tar
          docker run -d --name kernel-builder-${{ matrix.platform }} $(echo ${{ env.KERNEL_REPO_DIR }} | tr '[:upper:]' '[:lower:]') bash -c "sleep infinity"
          docker cp kernel-builder-${{ matrix.platform }}:/data/data/com.termux/files/home/${{ env.KERNEL_REPO_DIR }}/out .
          echo "ZIPNAME=$(basename $(ls out/*\.zip | head -n 1))" >> $GITHUB_ENV

      - name: Upload Release
        uses: svenstaro/upload-release-action@v2
        with:
           repo_token: ${{ secrets.GITHUB_TOKEN }}
           file: ${{ env.KERNEL_REPO_DIR }}/out/${{ env.ZIPNAME }}
           asset_name: "TermuxDockerCompatible-KernelRedmi-9-9S-Pro-ProMax-miatoll.zip"
           tag: "redmi-note-9"
           release_name: "Redmi Note 9/9S/Pro/Pro Max"
           body: "Termux Docker compatible kernel for Redmi Note 9/9S/Pro/Pro Max"
           overwrite: true

      - name: Delete Artifact
        if: always()
        uses: geekyeggo/delete-artifact@v2
        with:
           name: "*"
